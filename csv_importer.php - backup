<?php
/*
Plugin Name: CSV Reminder Importer
Description: Import data as posts from a CSV file. <em>You can reach the author at <a href="mailto:d.v.kobozev@gmail.com">d.v.kobozev@gmail.com</a></em>.
Version: 0.3.7
Author: Denis Kobozev
*/

/**
 * LICENSE: The MIT License {{{
 *
 * Copyright (c) <2009> <Denis Kobozev>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @author    Denis Kobozev <d.v.kobozev@gmail.com>
 * @copyright 2009 Denis Kobozev
 * @license   The MIT License
 * }}}
 */

class CSVImporterPlugin {
    var $defaults = array(
        'csv_post_title'      => null,
        'csv_post_post'       => null,
        'csv_post_type'       => null,
        'csv_post_excerpt'    => null,
        'csv_post_date'       => null,
        'csv_post_tags'       => null,
        'csv_post_categories' => null,
        'csv_post_author'     => null,
        'csv_post_slug'       => null,
        'csv_post_parent'     => 0,
    );

    var $log = array();

    /**
     * Determine value of option $name from database, $default value or $params,
     * save it to the db if needed and return it.
     *
     * @param string $name
     * @param mixed  $default
     * @param array  $params
     * @return string
     */
    function process_option($name, $default, $params) {
        if (array_key_exists($name, $params)) {
            $value = stripslashes($params[$name]);
        } elseif (array_key_exists('_'.$name, $params)) {
            // unchecked checkbox value
            $value = stripslashes($params['_'.$name]);
        } else {
            $value = null;
        }
        $stored_value = get_option($name);
        if ($value == null) {
            if ($stored_value === false) {
                if (is_callable($default) &&
                    method_exists($default[0], $default[1])) {
                    $value = call_user_func($default);
                } else {
                    $value = $default;
                }
                add_option($name, $value);
            } else {
                $value = $stored_value;
            }
        } else {
            if ($stored_value === false) {
                add_option($name, $value);
            } elseif ($stored_value != $value) {
                update_option($name, $value);
            }
        }
        return $value;
    }

    /**
     * Plugin's interface
     *
     * @return void
     */
    function form() {
        $opt_draft = $this->process_option('csv_importer_import_as_draft',
            'publish', $_POST);
      //  $opt_cat = $this->process_option('csv_importer_cat', 0, $_POST);

        if ('POST' == $_SERVER['REQUEST_METHOD']) {
            $this->post(compact('opt_draft', 'opt_cat'));
        }
        
        $csv_link = plugins_url('/',__FILE__) . 'example.csv';

        // form HTML {{{
?>

<div class="wrap">
    <h2>Import Reminders as CSV</h2>
    
    <!--
    <div style="text-style-type:italic">
		<h4>How to Create CSV : </h4>
		<ul>
			<li># First two rows are for comment. You can put the csv description there or keep blank.</li>
			<li># Third is the header row and it must be exacly the same as folling.</li>

		<li> <strong style="color:#4B0606">reminder_title, reminder_info, reminder_date, reminder_time, sms_mobile, voice_phone, email_address, author </strong></li>
		
		<li> # Make the csv's column by looking at the header. </li>
		 <li> <a target='_blank' href="http://kindly-remind.com/instructions.jpg"># see the example.csv </a></li>

		</ul>
		<h4>Descrption of some keys: </h4>
		
		reminder_date => dd/mm/yyyy <br/>
		reminder_time => 13:00:00 <br/>
		author => login name <br/>
		If author is blank or misspelled, the plugin will use the current logged in user as the reminder importer

		If a column has no information, please keep it blank 
    </div>
    -->
    
    <div>
		<img src="http://kindly-remind.com/instructions.jpg" alt='instruction' /> <br/>
		<a href="http://kindly-remind.com/example.csv"> Example </a>
    </div>
    
    
    <form class="add:the-list: validate" method="post" enctype="multipart/form-data">
        <!-- Import as draft -->
        <p>
        <input name="_csv_importer_import_as_draft" type="hidden" value="publish" />
        <label><input name="csv_importer_import_as_draft" type="checkbox" value="draft" /> Import reminders as drafts</label>
        </p>
       
        <!-- File input -->
        <p><label for="csv_import">Upload file:</label><br/>
            <input name="csv_import" id="csv_import" type="file" value="" aria-required="true" /></p>
        <p class="submit"><input type="submit" class="button" name="submit" value="Import" /></p>
    </form>
</div><!-- end wrap -->

<?php
        // end form HTML }}}

    }

    function print_messages() {
        if (!empty($this->log)) {

        // messages HTML {{{
?>

<div class="wrap">
    <?php if (!empty($this->log['error'])): ?>

    <div class="error">

        <?php foreach ($this->log['error'] as $error): ?>
            <p><?php echo $error; ?></p>
        <?php endforeach; ?>

    </div>

    <?php endif; ?>

    <?php if (!empty($this->log['notice'])): ?>

    <div class="updated fade">

        <?php foreach ($this->log['notice'] as $notice): ?>
            <p><?php echo $notice; ?></p>
        <?php endforeach; ?>

    </div>

    <?php endif; ?>
</div><!-- end wrap -->

<?php
        // end messages HTML }}}

            $this->log = array();
        }
    }

    /**
     * Handle POST submission
     *
     * @param array $options
     * @return void
     */
    function post($options) {
        if (empty($_FILES['csv_import']['tmp_name'])) {
            $this->log['error'][] = 'No file uploaded, aborting.';
            $this->print_messages();
            return;
        }

        require_once 'File_CSV_DataSource/DataSource.php';

        $time_start = microtime(true);
        $csv = new File_CSV_DataSource;
        $file = $_FILES['csv_import']['tmp_name'];
        $this->stripBOM($file);

        if (!$csv->load($file)) {
            $this->log['error'][] = 'Failed to load file, aborting.';
            $this->print_messages();
            return;
        }

        // pad shorter rows with empty values
        $csv->symmetrize();

        // WordPress sets the correct timezone for date functions somewhere
        // in the bowels of wp_insert_post(). We need strtotime() to return
        // correct time before the call to wp_insert_post().
        $tz = get_option('timezone_string');
        if ($tz && function_exists('date_default_timezone_set')) {
            date_default_timezone_set($tz);
        }

        $skipped = 0;
        $imported = 0;
        $comments = 0;
        foreach ($csv->connect() as $csv_data) {
			$data = array();
			foreach($csv_data as $k=>$v){
				$k = preg_replace('[ ]','',$k);
				$data[$k] = trim($v);
			}
			
            if ($post_id = $this->create_post($data, $options)) {
                $imported++;               
                $this->create_custom_fields($post_id, $data);
            } else {
                $skipped++;
            }
        }

        if (file_exists($file)) {
            @unlink($file);
        }

        $exec_time = microtime(true) - $time_start;

        if ($skipped) {
            $this->log['notice'][] = "<b>Skipped {$skipped} posts (most likely due to empty title, body and excerpt).</b>";
        }
        $this->log['notice'][] = sprintf("<b>Imported {$imported} posts in %.2f seconds.</b>", $exec_time);
        $this->print_messages();
    }

    function create_post($data, $options) {	
		
        extract($options);		
		
        $data = array_merge($this->defaults, $data);
        
        
        $type = $data['csv_post_type'] ? $data['csv_post_type'] : 'post';
        $valid_type = (function_exists('post_type_exists') &&
            post_type_exists($type)) || in_array($type, array('post', 'page'));

        if (!$valid_type) {
            $this->log['error']["type-{$type}"] = sprintf(
                'Unknown post type "%s".', $type);
        }

        $new_post = array(
            'post_title'   => convert_chars($data['reminder_title']),
            'post_content' => wpautop(convert_chars($data['reminder_title'])),
            'post_status'  => 'publish',
            'post_type'    => 'reminderagent',
            'post_date'    => $this->parse_date($data['reminder_date'], $data['reminder_time']),
            'post_author'  => $this->get_auth_id($data['author']),
          );


        // create!
        $id = wp_insert_post($new_post);
        if($id){
			global $wpdb;
			$wpdb->update($wpdb->posts, array('post_status'=>'future'), array('ID'=>$id), array('%s'), array('%d'));
		}
      
        return $id;
    }
    
    

    function create_custom_fields($post_id, $data) {
		
		$author = $this->get_auth_id($data['author']);
		if($author == 0){
			global $user_ID;
			$author = $user_ID;
		}
		
		$userdata = get_userdata($author);
		
		
				
        update_post_meta($post_id, "_reminderagent_content", $data["reminder_info"]);
        update_post_meta($post_id, "_sent", '');
		update_post_meta($post_id, "_reminderagent_sms_phone", $data["sms_mobile"]);
		update_post_meta($post_id, "_reminderagent_sms_message", get_user_meta($userdata->ID, 'reminderagent_sms', true));
		update_post_meta($post_id, "_reminderagent_voice_phone", $data["voice_phone"]);
		update_post_meta($post_id, "_reminderagent_voice_message", get_user_meta($userdata->ID, 'reminderagent_tts', true));
		//update_post_meta($post_id, "_reminderagent_audio_source", $_POST["reminderagent_audio_source"]);
		update_post_meta($post_id, "_reminderagent_email_address", $data["email_address"]);
		update_post_meta($post_id, "_reminderagent_email_message", get_user_meta($userdata->ID, 'reminderagent_email', true));        
    }

    function get_auth_id($author) {
        if (is_numeric($author)) {
            return $author;
        }
        $author_data = get_userdatabylogin($author);
        return ($author_data) ? $author_data->ID : 0;
    }

    /**
     * Convert date in CSV file to 1999-12-31 23:52:00 format
     *
     * @param string $data
     * @return string
     */
    function parse_date($data, $time) {
		$time = $this->csvtime($time);
		
        $timestamp = strtotime($data);
       
        
        if (false === $timestamp) {
            return '';
        } else {
            $date = date('Y-m-d', $timestamp);
			return $date .= ' ' . $time;
        }		
    }
    
    /*
     * convert time into wp compatible
     * */
     function csvtime($a){
		$type = preg_replace('/[^ampAMP]/','',$a);
		$puretime = preg_replace('/[^0-9:]/','',$a);
		
		$times = explode(':', $puretime);
		
		$pm = strcasecmp($type, 'pm');
		$am = strcasecmp($type, 'am');
		$time = '';
		if($pm == 0){
			$time .= (int) $times[0] + 12;
		}
		elseif($am == 0){
			$time .= $times[0];
		}
		else{
			return '';
		}
		
		$time .= ':' . $times[1];
		
		return $time . ':00';
	  }

    /**
     * Delete BOM from UTF-8 file.
     *
     * @param string $fname
     * @return void
     */
    function stripBOM($fname) {
        $res = fopen($fname, 'rb');
        if (false !== $res) {
            $bytes = fread($res, 3);
            if ($bytes == pack('CCC', 0xef, 0xbb, 0xbf)) {
                $this->log['notice'][] = 'Getting rid of byte order mark...';
                fclose($res);

                $contents = file_get_contents($fname);
                if (false === $contents) {
                    trigger_error('Failed to get file contents.', E_USER_WARNING);
                }
                $contents = substr($contents, 3);
                $success = file_put_contents($fname, $contents);
                if (false === $success) {
                    trigger_error('Failed to put file contents.', E_USER_WARNING);
                }
            } else {
                fclose($res);
            }
        } else {
            $this->log['error'][] = 'Failed to open file, aborting.';
        }
    }
}


function csv_admin_menu() {
   // require_once ABSPATH . '/wp-admin/admin.php';
    $plugin = new CSVImporterPlugin;
    //add_management_page('edit.php', 'CSV Importer', 'manage_options', __FILE__,
    if(current_user_can('calendermenu')) :
		add_submenu_page('edit.php?post_type=reminderagent', 'Import from CSV', 'Import from CSV', 'calendermenu', 'reminder_import',array($plugin, 'form'));
	else :
		add_submenu_page('edit.php?post_type=reminderagent', 'Import from CSV', 'Import from CSV', 'manage_options', 'reminder_import',
        array($plugin, 'form'));
    endif;
}

add_action('admin_menu', 'csv_admin_menu');

?>
